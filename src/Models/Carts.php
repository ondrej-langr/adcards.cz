<?php

/**
 * This file is generated by PromCMS, however you can add methods and other logic to this class
 * as this file will be just checked for presence of class in next models sync.
 */

namespace PromCMS\App\Models;

use Doctrine\ORM\Mapping as ORM;
use PromCMS\Core\Database\Models\Mapping as PROM;
use PromCMS\App\CartExtras;
use PromCMS\Core\Database\EntityManager;

#[ORM\Entity, ORM\Table(name: 'carts'), PROM\PromModel(ignoreSeeding: false), ORM\HasLifecycleCallbacks]
class Carts extends Base\Carts
{

    public static array $availableShipping = ["dpd" => ["title" => "DPD", "rate" => 90], "zasilkovna" => [
        "title" => "Zásilkovna",
        "metadataRequiredFields" => ["name", "zip"],
        "rate" => 110,
        // KČ
        "bonusContentAfterSelect" => '@app/partials/pages/cart/shipping/zasilkovna-select.twig',
    ]];

    public static array $availablePaymentMethods = [
        /**  "gopay" => [
         * "title" => "GOPAY"
         * ],*/
        "paypal" => ["title" => "Kartou nebo PayPal", "details" => ["onSelect" => "Pro platbu přes Paypal můžete použít i platební kartu. K platbě Vás vyzveme před dokončením objednávky."]],
        "bank-transfer" => ["title" => "Bankovním převodem"],
    ];

    function getPaymentMethods()
    {
        return static::$availablePaymentMethods;
    }

    function getShippingMethods()
    {
        return static::$availableShipping;
    }

    function deletePromoCode(): void
    {
        $this->promoCode = null;
    }

    public function getCount()
    {
        $count = 0;
        foreach ($this->getProducts() as $product) {
            $count += $product->getCount();
        }
        // $count += count($this->getCards());
        return $count;
    }

    function getProductCartByProduct(Products $product): ?CartProducts
    {
        $products = $this->getProducts();
        $productInCart = null;
        foreach ($products as $existingProductInCart) {
            if ($existingProductInCart->getProduct()->getId() === $product->getId()) {
                $productInCart = $existingProductInCart;
                break;
            }
        }
        return $productInCart;
    }

    function updateProduct(Products $product, int $toCount, EntityManager $em)
    {
        $toCount = max($toCount, 1);
        /** @type CartProducts|null $productInCart */
        $productInCart = $this->getProductCartByProduct($product);
        if (!$productInCart) {
            $productInCart = new CartProducts();
            $productInCart->setCart($this);
            $productInCart->setProduct($product);
            $this->products->add($productInCart);
            $em->persist($productInCart);
        }
        $productInCart->setCount($toCount);
        return $this;
    }

    function removeProductById(Products $product, EntityManager $em)
    {
        $products = $this->getProducts();
        $productInCart = $this->getProductCartByProduct($product);
        if (!$productInCart) {
            return $this;
        }
        $products->removeElement($productInCart);
        $em->remove($productInCart);
        return $this;
    }

    function updatePickedBonuses(EntityManager $em)
    {
        if (!$this->getCards()->count()) {
            $products = $this->getProducts();
            /**
             * @type $product CartProducts
             */
            foreach ($products as $product) {
                $isBonus = $product->getProduct()->getIsBonus();
                if ($isBonus) {
                    $products->removeElement($product);
                    $em->remove($product);
                }
            }
        }
    }

    function checkForPromoCodeValidity()
    {
        if (!$this->getPromoCode()->getEnabled()) {
            $this->deletePromoCode();
        }
    }

    function getTotalPrice($applyPromoCode = true)
    {
        $total = 0;
        foreach ($this->getProducts() as $product) {
            $total += $product->getTotalPrice();
        }
        /**
         * @type $card Cards
         */
        foreach ($this->getCards() as $card) {
            $total += $card->createPrice();
        }

        if ($applyPromoCode && $promoCode = $this->getPromoCode()) {
            $total = ceil($total - $total / 100 * $promoCode->getAmount());
        }

        return $total;
    }

    public function getRecommendedProducts(string $language)
    {
        return CartExtras::forOne($this, $language);
    }
}