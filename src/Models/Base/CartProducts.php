<?php

/**
 * This file is generated by PromCMS, do not edit this file as changes made to this file will be overriden in the next model sync.
 * Updates should be made to ../CartProducts.php as that is not overriden.
 */

namespace PromCMS\App\Models\Base;

use Doctrine\ORM\Mapping as ORM;
use PromCMS\Core\Database\Models\Mapping as PROM;
use PromCMS\Core\Database\Models\Abstract\Entity;

#[ORM\MappedSuperclass]
class CartProducts extends Entity
{
  use \PromCMS\Core\Database\Models\Trait\Sharable;
  use \PromCMS\Core\Database\Models\Trait\NumericId;
  
  #[ORM\ManyToOne(targetEntity: \PromCMS\App\Models\Carts::class, inversedBy: 'products'), ORM\JoinColumn(name: 'cart_id', nullable: false, unique: false, referencedColumnName: 'id'), PROM\PromModelColumn(title: 'Košík', type: 'relationship', editable: false, hide: false, localized: false)]
  protected ?\PromCMS\App\Models\Carts $cart;
  
  #[ORM\OneToOne(targetEntity: \PromCMS\App\Models\Products::class), ORM\JoinColumn(name: 'product_id', nullable: false, unique: false, referencedColumnName: 'id'), PROM\PromModelColumn(title: 'Produkt', type: 'relationship', editable: false, hide: false, localized: false)]
  protected ?\PromCMS\App\Models\Products $product;
  
  #[ORM\Column(name: 'count', nullable: false, unique: false, type: 'integer'), PROM\PromModelColumn(title: 'Počet', type: 'number', editable: false, hide: false, localized: false)]
  protected ?int $count;
  
  function __construct()
  {
  }
  
  #[ORM\PostLoad]
  function __prom__initCollections()
  {
  }
  
  function getCart(): \PromCMS\App\Models\Carts
  {
    return $this->cart;
  }
  
  function setCart(\PromCMS\App\Models\Carts $cart): static
  {
    $this->cart = $cart;
    return $this;
  }
  
  function getProduct(): \PromCMS\App\Models\Products
  {
    return $this->product;
  }
  
  function setProduct(\PromCMS\App\Models\Products $product): static
  {
    $this->product = $product;
    return $this;
  }
  
  function getCount(): int
  {
    return $this->count;
  }
  
  function setCount(int $count): static
  {
    $this->count = $count;
    return $this;
  }
}