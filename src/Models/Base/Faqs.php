<?php

/**
 * This file is generated by PromCMS, do not edit this file as changes made to this file will be overriden in the next model sync.
 * Updates should be made to ../Faqs.php as that is not overriden.
 */

namespace PromCMS\App\Models\Base;

use Doctrine\ORM\Mapping as ORM;
use PromCMS\Core\Database\Models\Mapping as PROM;
use Doctrine\Common\Collections\ArrayCollection;
use PromCMS\Core\Database\Models\Abstract\Entity;

#[ORM\MappedSuperclass]
class Faqs extends Entity
{
  use \PromCMS\Core\Database\Models\Trait\Timestamps;
  use \PromCMS\Core\Database\Models\Trait\Ordable;
  use \PromCMS\Core\Database\Models\Trait\Ownable;
  use \PromCMS\Core\Database\Models\Trait\Localized {
    getTranslations as protected getTranslationsOriginal;
  }
  use \PromCMS\Core\Database\Models\Trait\Sharable;
  use \PromCMS\Core\Database\Models\Trait\NumericId;
  
  #[ORM\Column(name: 'title', nullable: false, unique: true, type: 'string'), PROM\PromModelColumn(title: 'Titulek', type: 'string', editable: false, hide: false, localized: true)]
  protected ?string $title;
  
  #[ORM\Column(name: 'content', nullable: false, unique: false, type: 'text'), PROM\PromModelColumn(title: 'Obsah', type: 'longText', editable: false, hide: false, localized: true)]
  protected ?string $content;
  /**
  * @var ArrayCollection<int, \PromCMS\App\Models\FaqsTranslation>
  */
  
  #[ORM\OneToMany(targetEntity: \PromCMS\App\Models\FaqsTranslation::class, mappedBy: 'object', cascade: ['persist', 'remove'])]
  protected $translations;
  
  function __construct()
  {
    $this->translations = new ArrayCollection();
  }
  
  #[ORM\PostLoad]
  function __prom__initCollections()
  {
    $this->translations ??= new ArrayCollection();
  }
  /**
  * @return ArrayCollection<string, \PromCMS\App\Models\FaqsTranslation>
  */
  
  function getTranslations(): ArrayCollection
  {
    return $this->getTranslationsOriginal();
  }
  
  function addTranslation(\PromCMS\App\Models\FaqsTranslation $translation): static
  {
    if (!$this->translations->contains($translation)) {
      $translation->setObject($this);
      $this->translations->set($translation->getLocale(), $translation);
    }
    return $this;
  }
  
  function getTitle(): string
  {
    return $this->title;
  }
  
  function setTitle(string $title): static
  {
    $this->title = $title;
    return $this;
  }
  
  function getContent(): string
  {
    return $this->content;
  }
  
  function setContent(string $content): static
  {
    $this->content = $content;
    return $this;
  }
}