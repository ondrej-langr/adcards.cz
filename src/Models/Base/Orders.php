<?php

/**
 * This file is generated by PromCMS, do not edit this file as changes made to this file will be overriden in the next model sync.
 * Updates should be made to ../Orders.php as that is not overriden.
 */

namespace PromCMS\App\Models\Base;

use Doctrine\ORM\Mapping as ORM;
use PromCMS\Core\Database\Models\Mapping as PROM;
use PromCMS\Core\Database\Models\Abstract\Entity;

#[ORM\MappedSuperclass]
class Orders extends Entity
{
  use \PromCMS\Core\Database\Models\Trait\Timestamps;
  use \PromCMS\Core\Database\Models\Trait\Ordable;
  use \PromCMS\Core\Database\Models\Trait\NumericId;
  
  #[ORM\Column(name: '_uuid', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Unikátní identifikátor objednávky', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $_uuid;
  
  #[ORM\Column(name: 'firstname', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Jméno', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $firstName;
  
  #[ORM\Column(name: 'lastname', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Příjmení', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $lastName;
  
  #[ORM\Column(name: 'email', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Email', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $email;
  
  #[ORM\Column(name: 'phone', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Telefon', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $phone;
  
  #[ORM\Column(name: 'street', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Ulice', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $street;
  
  #[ORM\Column(name: 'buildingnumber', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Číslo baráku', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $buildingNumber;
  
  #[ORM\Column(name: 'city', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Město', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $city;
  
  #[ORM\Column(name: 'postalcode', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'PSČ', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $postalCode;
  
  #[ORM\Column(name: 'note', nullable: true, unique: false, type: 'text'), PROM\PromModelColumn(title: 'Note', type: 'longText', editable: false, hide: false, localized: false)]
  protected ?string $note;
  
  #[PROM\PromModelColumn(title: 'Doprava', type: 'string', editable: true, hide: false, localized: false)]
  protected ?string $shippingMethod;
  
  #[PROM\PromModelColumn(title: 'Cena za dopravu', type: 'number', editable: true, hide: false, localized: false)]
  protected ?int $shippingRate;
  
  #[ORM\Column(name: 'paymentmethod', nullable: false, unique: false, type: 'string'), PROM\PromModelColumn(title: 'Typ platby', type: 'string', editable: false, hide: false, localized: false)]
  protected ?string $paymentMethod;
  
  #[ORM\Column(name: 'status', nullable: false, unique: false, type: 'string', enumType: OrderState::class), PROM\PromModelColumn(title: 'Stav', type: 'enum', editable: false, hide: false, localized: false)]
  protected ?OrderState $status;
  
  #[PROM\PromModelColumn(title: 'Celková částka', type: 'number', editable: true, hide: false, localized: false)]
  protected ?int $totalCost;
  
  #[PROM\PromModelColumn(title: 'ID PayPal transakce', type: 'string', editable: true, hide: false, localized: false)]
  protected ?string $paypalTransactionId;
  
  #[PROM\PromModelColumn(title: 'Karty', type: 'json', editable: true, hide: false, localized: false)]
  protected ?array $cards;
  
  #[PROM\PromModelColumn(title: 'Produkty', type: 'json', editable: true, hide: false, localized: false)]
  protected ?array $products;
  
  #[PROM\PromModelColumn(title: 'Slevový kód - název', type: 'string', editable: true, hide: false, localized: false)]
  protected ?string $promoCodeValue;
  
  #[PROM\PromModelColumn(title: 'Slevový kód - hodnota', type: 'number', editable: true, hide: false, localized: false)]
  protected ?int $promoCodeAmount;
  
  #[PROM\PromModelColumn(title: 'Měna', type: 'enum', editable: true, hide: false, localized: false)]
  protected ?Currency $currency;
  
  function __construct()
  {
  }
  
  #[ORM\PostLoad]
  function __prom__initCollections()
  {
  }
  
  function get_uuid(): string
  {
    return $this->_uuid;
  }
  
  function set_uuid(string $_uuid): static
  {
    $this->_uuid = $_uuid;
    return $this;
  }
  
  function getFirstName(): string
  {
    return $this->firstName;
  }
  
  function setFirstName(string $firstName): static
  {
    $this->firstName = $firstName;
    return $this;
  }
  
  function getLastName(): string
  {
    return $this->lastName;
  }
  
  function setLastName(string $lastName): static
  {
    $this->lastName = $lastName;
    return $this;
  }
  
  function getEmail(): string
  {
    return $this->email;
  }
  
  function setEmail(string $email): static
  {
    $this->email = $email;
    return $this;
  }
  
  function getPhone(): string
  {
    return $this->phone;
  }
  
  function setPhone(string $phone): static
  {
    $this->phone = $phone;
    return $this;
  }
  
  function getStreet(): string
  {
    return $this->street;
  }
  
  function setStreet(string $street): static
  {
    $this->street = $street;
    return $this;
  }
  
  function getBuildingNumber(): string
  {
    return $this->buildingNumber;
  }
  
  function setBuildingNumber(string $buildingNumber): static
  {
    $this->buildingNumber = $buildingNumber;
    return $this;
  }
  
  function getCity(): string
  {
    return $this->city;
  }
  
  function setCity(string $city): static
  {
    $this->city = $city;
    return $this;
  }
  
  function getPostalCode(): string
  {
    return $this->postalCode;
  }
  
  function setPostalCode(string $postalCode): static
  {
    $this->postalCode = $postalCode;
    return $this;
  }
  
  function getNote(): ?string
  {
    return $this->note;
  }
  
  function setNote(?string $note): static
  {
    $this->note = $note;
    return $this;
  }
  
  function getShippingMethod(): string
  {
    return $this->shippingMethod;
  }
  
  function setShippingMethod(string $shippingMethod): static
  {
    $this->shippingMethod = $shippingMethod;
    return $this;
  }
  
  function getShippingRate(): int
  {
    return $this->shippingRate;
  }
  
  function setShippingRate(int $shippingRate): static
  {
    $this->shippingRate = $shippingRate;
    return $this;
  }
  
  function getPaymentMethod(): string
  {
    return $this->paymentMethod;
  }
  
  function setPaymentMethod(string $paymentMethod): static
  {
    $this->paymentMethod = $paymentMethod;
    return $this;
  }
  
  function getStatus(): OrderState
  {
    return $this->status;
  }
  
  function setStatus(OrderState $status): static
  {
    $this->status = $status;
    return $this;
  }
  
  function getTotalCost(): int
  {
    return $this->totalCost;
  }
  
  function setTotalCost(int $totalCost): static
  {
    $this->totalCost = $totalCost;
    return $this;
  }
  
  function getPaypalTransactionId(): ?string
  {
    return $this->paypalTransactionId;
  }
  
  function setPaypalTransactionId(?string $paypalTransactionId): static
  {
    $this->paypalTransactionId = $paypalTransactionId;
    return $this;
  }
  
  function getCards(): ?array
  {
    return $this->cards;
  }
  
  function setCards(?array $cards): static
  {
    $this->cards = $cards;
    return $this;
  }
  
  function getProducts(): ?array
  {
    return $this->products;
  }
  
  function setProducts(?array $products): static
  {
    $this->products = $products;
    return $this;
  }
  
  function getPromoCodeValue(): ?string
  {
    return $this->promoCodeValue;
  }
  
  function setPromoCodeValue(?string $promoCodeValue): static
  {
    $this->promoCodeValue = $promoCodeValue;
    return $this;
  }
  
  function getPromoCodeAmount(): ?int
  {
    return $this->promoCodeAmount;
  }
  
  function setPromoCodeAmount(?int $promoCodeAmount): static
  {
    $this->promoCodeAmount = $promoCodeAmount;
    return $this;
  }
  
  function getCurrency(): Currency
  {
    return $this->currency;
  }
  
  function setCurrency(Currency $currency): static
  {
    $this->currency = $currency;
    return $this;
  }
}